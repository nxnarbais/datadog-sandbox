# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: narbais-app-step-functions
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  region: eu-west-3
  environment:
    DD_API_KEY: "not_sure_why_i_did_that"

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.py'
#    - '!exclude-me-dir/**'
#    - include-me.py
#    - include-me-dir/**

# functions:
#   hello:
#     handler: src/handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

#Exclude the files in functions
package:
  individually: true
  exclude:
    - node_modules/**
    - venv/**
    - tf/**
    - package.json
    - package-lock.json
    - requirements.txt

plugins:
  - serverless-step-functions
  - serverless-plugin-datadog
  - serverless-python-requirements

resources:
  Resources:
    #Source Bucket
    ImagesSourceBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "narbais-sls-stepfunction-source"
        NotificationConfiguration:
          EventBridgeConfiguration:
            EventBridgeEnabled: true
    #Thumbnail Bucket
    ThumbnailBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "narbais-sls-stepfunction-thumbnail"
    # Role
    thumbnailCreationFunRole:
      Type: AWS::IAM::Role
      Properties:
       RoleName: narbais-sls-lambda-s3-role
       AssumeRolePolicyDocument:
         Version: '2012-10-17'
         Statement:
           - Effect: Allow
             Principal:
               Service:
                 - lambda.amazonaws.com
             Action: sts:AssumeRole
       Policies: 
        - PolicyName: narbais-sls-lambda-s3-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                 - 'Fn::Join':
                    - ':'
                    -
                     - 'arn:aws:logs'
                     - Ref: 'AWS::Region'
                     - Ref: 'AWS::AccountId'
                     - 'log-group:/aws/lambda/*:*:*'

              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:s3:::"
                      - "Ref": "ThumbnailBucket"
                      - /*
              - Effect: Allow
                Action:
                  - s3:*
                  - s3:PutObject
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:s3:::"
                      - "Ref": "ImagesSourceBucket"
                      - /*

functions:
  getimageMetadata:
    handler: src/handler.getimageMetadata
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
  validImageFormat:
    handler: src/handler.validImageFormat
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
  thumbnailCreation:
    handler: src/handler.thumbnailCreation
    role: thumbnailCreationFunRole
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    
stepFunctions:
  validate: true
  stateMachines:
    thumbnailGenerator:
      name: narbaisThumbnailGenerator
      events:
        - cloudwatchEvent:
            event:
              source: 
                - "aws.s3"
              detail-type:
                - "Object Created"
              detail:
                bucket:
                  name:
                    - !Ref ImagesSourceBucket
                reason: 
                   - "PutObject"
      definition:
        StartAt: getimageMetadata
        States:
          getimageMetadata:
            Type: Task
            Resource:
              Fn::GetAtt: [getimageMetadata, Arn]
            ResultPath: "$.imageMetadata"
            Next: validateImage
          validateImage:
             Type: Choice
             Choices:
               - Variable: "$.imageMetadata.isValidImage"
                 NumericEquals: 1
                 Next: "validImageFormat"
               - Variable: "$.imageMetadata.isValidImage"
                 NumericEquals: 0
                 Next: "notvalidImageFormat"
          validImageFormat:
            Type: Task
            Resource:
              Fn::GetAtt: [validImageFormat, Arn]
            ResultPath: "$.imageMetadata"
            Next: thumbnailCreation
          notvalidImageFormat:
             Type: Fail
             Cause: "Image is not in valid format!!"
             Error: "Image is not in valid format!!"
          thumbnailCreation:
             Type: Task
             Resource:
               Fn::GetAtt: [thumbnailCreation, Arn]
             End: true

custom:
  datadog:
    site: datadoghq.com
    apiKeySecretArn: arn:aws:secretsmanager:eu-west-3:601427279990:secret:datadog_api_key-qr4kyS
    forwarderArn: arn:aws:lambda:eu-west-3:601427279990:function:datadog-forwarder
    enableStepFunctionTracing: true
    mergeStepFunctionAndLambdaTraces: true
  pythonRequirements:
    dockerizePip: non-linux
    layer:
      name: "narbais-sls-python39"
      description: Python requirements lambda
      compatibleRuntimes:
        - python3.9
    noDeploy:
      - pytest